package szymanskin;

import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;

/**
 *
 * @author Thomas Kolb : s1027332
 */
public class SzymanskiN 
{
    public static void main(String[] args) throws IOException 
    {
        System.out.println("<-- Welcome to Szymanski-n the java application -->");
        System.out.println("Please enter the number of processes you would like to have in your NuSMV file");
        Scanner s = new Scanner(System.in);
        int n = s.nextInt();
        System.out.println("you entered " + n + " processes");
        System.out.println("Generating .smv file...");
        WriteSMVFile(n);
    }  
    
    private static void WriteSMVFile(int n) throws IOException 
    {
        //
        FileWriter fw = new FileWriter("szymanski" + n + ".smv", true);
        fw.write("--Generated by Szymanski-n v1.0\n");
        fw.write("--Author: Thomas Kolb, s1027332\n\n");
        fw.write("MODULE main\n");
        fw.write("VAR\n");
        fw.write("\tflag : array 0.." + n + " of 0..4;\n");
        
        //start all processes
        for(int i = 0; i < n; i++) {
            fw.write("\tp" + i + " : process run_process" + i + "(flag);\n");
        }
        fw.write("ASSIGN\n");
        for(int i = 0; i < n; i++) {
            fw.write("\tinit(flag[" + i + "]) := 0;\n");
        }
        
        //create all LTLSPECS for every combination of processes
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                if(i != j) {
                    fw.write("LTLSPEC\n");
                    fw.write("\tG !(p" + i + ".line = 10 & p" + j + ".line = 10)\n");
                }
            }
        }
        for(int i = 0; i < n; i++) {
            fw.write("LTLSPEC\n");
            fw.write("\tG (p" + i + ".line = 1 -> F p" + i + ".line = 10)\n");
        }
        
        //create all modules
        for(int i = 0; i < n; i++) {
            fw.write("\n");
            fw.write("MODULE run_process" + i + "(flag)\n");
            fw.write("VAR\n");
            fw.write("\tline : 0..12;\n");
            fw.write("ASSIGN\n");
            fw.write("\tinit(line) := 0;\n");
            fw.write("\tnext(line) :=\n");
            fw.write("\t\tcase\n");
            fw.write("\t\t\tline = 0 : 1;\n");
            fw.write("\t\t\tline = 1 : 2;\n");
            fw.write("\t\t\tline = 2 : 3;\n");
            fw.write("\t\t\tline = 3 " + writeForFlags(n, '&', "<", 3, false) + " : 4;\n");
            fw.write("\t\t\tline = 4 : 5;\n");
            fw.write("\t\t\tline = 5 " + writeForFlags(n, '|', "=", 1, false) + " : 6;\n");
            fw.write("\t\t\tline = 5 " + writeForFlags(n, '|', "=", 1, true) + " : 8;\n");
            fw.write("\t\t\tline = 6 : 7;\n");
            fw.write("\t\t\tline = 7 " + writeForFlags(n, '|', "=", 4, false) + " : 8;\n");
            fw.write("\t\t\tline = 8 : 9;\n");
            fw.write("\t\t\tline = 9 " + writeForFlagsLT('&', "<", 2, i) + " : 10;\n");
            fw.write("\t\t\tline = 10 : 11;\n");
            fw.write("\t\t\tline = 11" + writeLine11(i, n) + " : 12;\n");
            fw.write("\t\t\tline = 12 : 0;\n");
            fw.write("\t\t\tTRUE : line;\n");
            fw.write("\t\tesac;\n");
            fw.write("\tnext(flag[" + i + "]) := \n");
            fw.write("\t\tcase\n");
            fw.write("\t\t\tline = 2 : 1;\n");
            fw.write("\t\t\tline = 4 : 3;\n");
            fw.write("\t\t\tline = 6 : 2;\n");
            fw.write("\t\t\tline = 8 : 4;\n");
            fw.write("\t\t\tline = 12 : 0;\n");
            fw.write("\t\t\tTRUE : flag[" + i + "];\n");
            fw.write("\t\tesac;\n");
            fw.write("FAIRNESS\n");
            fw.write("\trunning;\n");
        }
        
        fw.close();
        /*
        fw.write("\n");
        fw.write("\t\t\t\n");
        for(int i = 0; i < n; i++) {
            fw.write("\n");
        }*/
    }
    
    private static String writeForFlags(int total, char symbol, String eq_symbol, int numb, boolean not) {
        StringBuilder sb = new StringBuilder();
        sb.append("& ");
        if(not) {sb.append("!");}
        sb.append("(");
        for(int i = 0; i < total; i++) {
            sb.append("flag[" + i + "] " + eq_symbol + " " + numb);
            if((i+1) < total) {
                sb.append(" " + symbol + " ");
            }
        }
        sb.append(")");
        return sb.toString();
    }
    
    private static String writeForFlagsLT(char symbol, String eq_symbol, int numb, int lt) {
        if(lt == 0) {return "";}
        StringBuilder sb = new StringBuilder();
        sb.append("& (");
        for(int i = 0; i < lt; i++) {
            sb.append("flag[" + i + "] " + eq_symbol + " " + numb);
            if((i+1) < lt) {
                sb.append(" " + symbol + " ");
            }
        }
        sb.append(")");
        return sb.toString();
    }
    
    private static String writeLine11(int index, int total) {
        if((index+1) == total) {return "";}
        StringBuilder sb = new StringBuilder();
        sb.append(" & (");
        for(int i = index+1; i < total; i++) {
            sb.append("(");
            sb.append("flag[" + i + "] < " + 2);
            sb.append(" | flag[" + i + "] > " + 3);
            sb.append(")");
            if((i+1) < total) {
                sb.append(" & ");
            }
        }
        sb.append(")");
        return sb.toString();
    }
}
